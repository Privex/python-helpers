import aiomcache
import aioredis
import geoip2.database
import redis
from privex.helpers.collections import DictObject
from typing import Any, Dict, Generator, Optional, Tuple, Union

from privex.helpers.types import T

HAS_REDIS: bool
HAS_ASYNC_REDIS: bool
HAS_DNSPYTHON: bool
HAS_CRYPTO: bool
HAS_SETUPPY_COMMON: bool
HAS_SETUPPY_BUMP: bool
HAS_SETUPPY_COMMANDS: bool
HAS_GEOIP: bool
HAS_PRIVEX_DB: Any
__STORE: dict

def _get_threadstore(name=None, fallback=None, thread_id=None) -> Any: ...

def _get_all_threadstore(name=None) -> Generator[Tuple[Union[int, str], Union[Dict[str, Any], Any]], None, None]: ...

def _set_threadstore(name, obj: T, thread_id=None) -> T: ...

def clean_threadstore(thread_id: Any=..., name: Any=..., clean_all: bool=...) -> bool: ...
def connect_redis(*args: Any, **rd_config: Any): ...
def get_redis(new_connection: Any=..., thread_id: Any=..., **rd_config: Any) -> redis.Redis: ...
def close_redis(thread_id: Any=..., close_all: Any=...) -> bool: ...
def reset_redis(thread_id: Any=...) -> redis.Redis: ...
def configure_redis(host: Any=..., port: int=..., db: int=..., **kwargs: Any) -> Any: ...
async def connect_redis_async(**rd_config: Any) -> aioredis.Redis: ...
async def get_redis_async(new_connection: Any=..., thread_id: Any=..., **rd_config: Any) -> aioredis.connection: ...
async def close_redis_async(thread_id: Any=..., close_all: Any=...) -> bool: ...
async def reset_redis_async(thread_id: Any=...) -> aioredis.connection: ...
async def configure_redis_async(host: Any=..., port: int=..., db: int=..., **kwargs: Any) -> Any: ...
async def connect_memcached_async(**rd_config: Any) -> aiomcache.Client: ...
async def get_memcached_async(new_connection: Any=..., thread_id: Any=..., **rd_config: Any) -> aiomcache.Client: ...
async def close_memcached_async(thread_id: Any=..., close_all: Any=...) -> bool: ...
async def reset_memcached_async(thread_id: Any=...) -> aiomcache.Client: ...
async def configure_memcached_async(host: Any=..., port: int=..., **kwargs: Any) -> Any: ...
def connect_geoip(*args: Any, **geo_config: Any) -> geoip2.database.Reader: ...
def _find_geoip(geo_type: str) -> Optional[str]: ...
def get_geodbs() -> DictObject: ...
def get_geoip_db(geo_type: str) -> str: ...
def get_geoip(geo_type: str, new_connection: Any=..., thread_id: Any=..., **geo_config: Any) -> geoip2.database.Reader: ...
def close_geoip(geo_type: str, thread_id: Any=..., close_all: Any=...) -> bool: ...
def reset_geoip(geo_type: str, thread_id: Any=...) -> geoip2.database.Reader: ...
