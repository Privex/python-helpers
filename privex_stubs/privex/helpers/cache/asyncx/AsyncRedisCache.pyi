import aioredis
from aioredis.commands import ContextRedis as ContextRedis
from privex.helpers.cache.asyncx.base import AsyncCacheAdapter as AsyncCacheAdapter
from privex.helpers.common import empty as empty
from privex.helpers.exceptions import CacheNotFound as CacheNotFound
from privex.helpers.plugin import close_redis_async as close_redis_async, get_redis_async as get_redis_async
from privex.helpers.settings import DEFAULT_CACHE_TIMEOUT as DEFAULT_CACHE_TIMEOUT
from privex.helpers.types import VAL_FUNC_CORO as VAL_FUNC_CORO
from typing import Any, Optional

log: Any

class AsyncRedisCache(AsyncCacheAdapter):
    pickle_default: bool = ...
    use_pickle: bool
    adapter_enter_reconnect: bool = ...
    adapter_exit_close: bool = ...
    def __init__(self, use_pickle: bool=..., redis_instance: aioredis.Redis=..., *args: Any, **kwargs: Any) -> None: ...
    async def redis(self) -> aioredis.Redis: ...
    async def get(self, key: str, default: Any=..., fail: bool=...) -> Any: ...
    async def set(self, key: str, value: Any, timeout: Optional[int]=...) -> Any: ...
    async def remove(self, *key: str) -> bool: ...
    async def update_timeout(self, key: str, timeout: int=...) -> Any: ...
    async def connect(self, *args: Any, **kwargs: Any) -> ContextRedis: ...
    async def close(self) -> None: ...
