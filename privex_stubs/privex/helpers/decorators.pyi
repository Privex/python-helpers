from enum import Enum
from privex.helpers.asyncx import async_sync as async_sync, await_if_needed as await_if_needed
from privex.helpers.cache import async_adapter_get as async_adapter_get, cached as cached
from privex.helpers.common import empty as empty, is_true as is_true
from typing import Any, Union

DEF_RETRY_MSG: str
DEF_FAIL_MSG: str
log: Any

def retry_on_err(max_retries: int=..., delay: Union[int, float]=..., **retry_conf: Any) -> Any: ...
def async_retry(max_retries: int=..., delay: Union[int, float]=..., **retry_conf: Any) -> Any: ...

class FormatOpt(Enum):
    POS_AUTO: str = ...
    POS_ONLY: str = ...
    KWARG_ONLY: str = ...
    MIX: str = ...
FO = FormatOpt

def r_cache_async(cache_key: Union[str, callable], cache_time: Any=..., format_args: list=..., format_opt: FO=..., **opts: Any) -> Any: ...
def r_cache(cache_key: Union[str, callable], cache_time: Any=..., format_args: list=..., format_opt: FO=..., **opts: Any) -> Any: ...
def mock_decorator(*dec_args: Any, **dec_kwargs: Any): ...
