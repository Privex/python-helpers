import threading
from threading import Event, Lock
from typing import Any, List, Optional, Union

def lock_acquire_timeout(lock: Lock, timeout: Union[int, float]=..., fail: Any=..., block: Any=...) -> Any: ...

class BetterEvent(Event):
    wait_on: str
    name: Optional[str]
    notify_set: bool
    notify_clear: bool
    def __init__(self, wait_on: str=..., name: str=..., default: bool=..., notify_set: Any=..., notify_clear: Any=...) -> None: ...
    def set(self): ...
    def clear(self): ...
    def wait_set(self, timeout: Optional[float]=..., fail: Any=...) -> bool: ...
    def wait_clear(self, timeout: Optional[float]=..., fail: Any=...) -> bool: ...
    def wait(self, timeout: Optional[Union[int, float]]=..., fail: Any=...) -> bool: ...
InvertibleEvent = BetterEvent

class StopperThread(threading.Thread):
    stop_events: List[threading.Event]
    ev_stop: Any = ...
    ev_pause: Any = ...
    pause_events: Any = ...
    def __init__(self, *args: Any, default_stop: bool = ..., default_pause: bool = ..., stop_events: Optional[Any] = ..., pause_events: Optional[Any] = ..., **kwargs: Any) -> None: ...
    @property
    def should_pause(self) -> bool: ...
    @property
    def should_stop(self) -> bool: ...
    @property
    def should_run(self) -> bool: ...
    def emit_stop(self): ...
    def emit_start(self): ...
    def emit_pause(self): ...
    def emit_unpause(self): ...

class SafeLoopThread(StopperThread):
    loop_sleep: float = ...
    pause_sleep: float = ...
    in_queue: Any = ...
    out_queue: Any = ...
    def __init__(self, *args: Any, default_stop: bool = ..., default_pause: bool = ..., **kwargs: Any) -> None: ...
    def loop(self) -> None: ...
    def run(self) -> None: ...

def event_multi_wait(*events: _evt_btevt, trigger: Any=..., event_sleep: Any=..., wait_timeout: Any=..., fail: Any=..., **kwargs: Any) -> _bl_list_btevt: ...
def event_multi_wait_all(*events: _evt_btevt, event_sleep: Any=..., wait_timeout: Any=..., fail: Any=..., **kwargs: Any) -> bool: ...
def event_multi_wait_any(*events: _evt_btevt, event_sleep: Any=..., wait_timeout: Any=..., fail: Any=..., **kwargs: Any) -> bool: ...
