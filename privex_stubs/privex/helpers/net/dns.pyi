from ipaddress import IPv4Address, IPv6Address
from privex.helpers.types import IP_OR_STR
from typing import Any, AsyncGenerator, Generator, List, Optional, Tuple, Union

def asn_to_name(as_number: Union[int, str], quiet: bool=...) -> str: ...
def ip_to_rdns(ip: str, boundary: bool=..., v6_boundary: int=..., v4_boundary: int=...) -> str: ...
def ip4_to_rdns(ip_obj: IPv4Address, v4_boundary: int=..., boundary: bool=...) -> str: ...
def ip6_to_rdns(ip_obj: IPv6Address, v6_boundary: int=..., boundary: bool=...) -> str: ...
async def resolve_ips_async(addr: IP_OR_STR, version: Union[str, int]=..., v4_convert: Any=...) -> List[str]: ...
async def resolve_ip_async(addr: IP_OR_STR, version: Union[str, int]=..., v4_convert: Any=...) -> Optional[str]: ...
async def resolve_ips_multi_async(*addr: IP_OR_STR, version: Union[str, int]=..., v4_convert: Any=...) -> AsyncGenerator[Tuple[str, Optional[List[str]]], None]: ...
def resolve_ips(addr: IP_OR_STR, version: Union[str, int]=..., v4_convert: Any=...) -> List[str]: ...
def resolve_ip(addr: IP_OR_STR, version: Union[str, int]=..., v4_convert: Any=...) -> Optional[str]: ...
def resolve_ips_multi(*addr: IP_OR_STR, version: Union[str, int]=..., v4_convert: Any=...) -> Generator[Tuple[str, Optional[List[str]]], None, None]: ...
async def get_rdns_async(host: IP_OR_STR, throw: Any=..., version: Any=..., name_port: Any=...) -> Optional[str]: ...
def get_rdns(host: IP_OR_STR, throw: Any=...) -> Optional[str]: ...
def get_rdns_multi(*hosts: IP_OR_STR, throw: Any=...) -> Generator[Tuple[str, Optional[str]], None, None]: ...
